/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package stern;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.awt.Color;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author calin
 */
public class PersonalizedTimeConverter extends javax.swing.JFrame {

    /**
     * Creates new form PersonalizedTimeConverter
     */
    Connection con;
    public PersonalizedTimeConverter() {
        initComponents();
        createConnection();
    }
    void createConnection(){
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            //connect the database
            con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/ptcdb", "root", "Calingasanjohnerick01");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PersonalizedTimeConverter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PersonalizedTimeConverter.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bgtab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tabHome = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tabFeatures = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        tabGlobalTimeConverter = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        tabPersonalizedTimeConverter = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        tabTimeMasterSchedule = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        tabHistory = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        tabExit = new javax.swing.JPanel();
        tabExit1 = new javax.swing.JLabel();
        jPanel100 = new javax.swing.JPanel();
        colon2 = new javax.swing.JLabel();
        personalizedtimeconverter = new javax.swing.JLabel();
        resulttime = new javax.swing.JLabel();
        resultdate = new javax.swing.JLabel();
        resultoffset = new javax.swing.JLabel();
        resulttimezone = new javax.swing.JLabel();
        line = new javax.swing.JPanel();
        colon1 = new javax.swing.JLabel();
        bgptc = new javax.swing.JLabel();
        bgpersonalizedtimeconverter = new javax.swing.JPanel();
        hour = new javax.swing.JTextField();
        min = new javax.swing.JTextField();
        sec = new javax.swing.JTextField();
        from = new javax.swing.JComboBox<>();
        to = new javax.swing.JComboBox<>();
        resultbg = new javax.swing.JPanel();
        convert = new javax.swing.JButton();
        to1 = new javax.swing.JLabel();
        from1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1014, 635));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 600));
        jPanel1.setLayout(null);

        bgtab.setBackground(new java.awt.Color(39, 39, 39));
        bgtab.setPreferredSize(new java.awt.Dimension(350, 600));
        bgtab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\calin\\OneDrive\\Documents\\NetBeansProjects\\STERN\\src\\Icon\\logo(welcome).png")); // NOI18N
        bgtab.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 100, -1));

        tabHome.setBackground(new java.awt.Color(39, 39, 39));
        tabHome.setPreferredSize(new java.awt.Dimension(200, 35));

        jLabel2.setBackground(new java.awt.Color(237, 237, 237));
        jLabel2.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(237, 237, 237));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/home.png"))); // NOI18N
        jLabel2.setText("HOME");
        jLabel2.setToolTipText("");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel2MouseEntered(evt);
            }
        });

        javax.swing.GroupLayout tabHomeLayout = new javax.swing.GroupLayout(tabHome);
        tabHome.setLayout(tabHomeLayout);
        tabHomeLayout.setHorizontalGroup(
            tabHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabHomeLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        tabHomeLayout.setVerticalGroup(
            tabHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabHomeLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bgtab.add(tabHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 350, 60));

        tabFeatures.setBackground(new java.awt.Color(39, 39, 39));
        tabFeatures.setPreferredSize(new java.awt.Dimension(200, 35));
        tabFeatures.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setBackground(new java.awt.Color(237, 237, 237));
        jLabel4.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(237, 237, 237));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("FEATURES");
        tabFeatures.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 260, 40));

        bgtab.add(tabFeatures, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 350, 60));

        tabGlobalTimeConverter.setBackground(new java.awt.Color(39, 39, 39));
        tabGlobalTimeConverter.setPreferredSize(new java.awt.Dimension(200, 35));
        tabGlobalTimeConverter.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setBackground(new java.awt.Color(237, 237, 237));
        jLabel5.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(237, 237, 237));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/global_time_converter.png"))); // NOI18N
        jLabel5.setText("GLOBAL TIME CONVERTER");
        jLabel5.setToolTipText("");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel5MouseEntered(evt);
            }
        });
        tabGlobalTimeConverter.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 260, 40));

        bgtab.add(tabGlobalTimeConverter, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, 350, 60));

        tabPersonalizedTimeConverter.setBackground(new java.awt.Color(69, 69, 69));
        tabPersonalizedTimeConverter.setPreferredSize(new java.awt.Dimension(200, 35));
        tabPersonalizedTimeConverter.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setBackground(new java.awt.Color(237, 237, 237));
        jLabel6.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(237, 237, 237));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/personalize-time-converter.png"))); // NOI18N
        jLabel6.setText("PERSONALIZED TIME CONVERTER");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel6MouseEntered(evt);
            }
        });
        tabPersonalizedTimeConverter.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 310, 40));

        bgtab.add(tabPersonalizedTimeConverter, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 350, 60));

        tabTimeMasterSchedule.setBackground(new java.awt.Color(39, 39, 39));
        tabTimeMasterSchedule.setPreferredSize(new java.awt.Dimension(200, 35));
        tabTimeMasterSchedule.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setBackground(new java.awt.Color(237, 237, 237));
        jLabel7.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(237, 237, 237));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/time_master_scheudule.png"))); // NOI18N
        jLabel7.setText("TIME MASTER SCHEDULER");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel7MouseEntered(evt);
            }
        });
        tabTimeMasterSchedule.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 260, 40));

        bgtab.add(tabTimeMasterSchedule, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 380, 350, 60));

        tabHistory.setBackground(new java.awt.Color(39, 39, 39));
        tabHistory.setPreferredSize(new java.awt.Dimension(200, 35));
        tabHistory.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setBackground(new java.awt.Color(237, 237, 237));
        jLabel8.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(237, 237, 237));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/history.png"))); // NOI18N
        jLabel8.setText("HISTORY");
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel8MouseEntered(evt);
            }
        });
        tabHistory.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 260, 40));

        bgtab.add(tabHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 440, 350, 60));

        tabExit.setBackground(new java.awt.Color(39, 39, 39));
        tabExit.setPreferredSize(new java.awt.Dimension(200, 35));
        tabExit.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabExit1.setBackground(new java.awt.Color(237, 237, 237));
        tabExit1.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        tabExit1.setForeground(new java.awt.Color(237, 237, 237));
        tabExit1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        tabExit1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/logout.png"))); // NOI18N
        tabExit1.setText("LOGOUT");
        tabExit1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabExit1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tabExit1MouseEntered(evt);
            }
        });
        tabExit.add(tabExit1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 260, 40));

        bgtab.add(tabExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 500, 350, 60));

        jPanel1.add(bgtab);
        bgtab.setBounds(0, 0, 350, 600);

        jPanel100.setBackground(new java.awt.Color(69, 69, 69));
        jPanel100.setLayout(null);

        colon2.setFont(new java.awt.Font("Goudy Stout", 1, 60)); // NOI18N
        colon2.setForeground(new java.awt.Color(237, 237, 237));
        colon2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        colon2.setText(":");
        jPanel100.add(colon2);
        colon2.setBounds(388, 105, 31, 83);

        personalizedtimeconverter.setBackground(new java.awt.Color(237, 237, 237));
        personalizedtimeconverter.setFont(new java.awt.Font("Goudy Stout", 0, 20)); // NOI18N
        personalizedtimeconverter.setForeground(new java.awt.Color(237, 237, 237));
        personalizedtimeconverter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        personalizedtimeconverter.setText("PERSONALIZED TIME CONVERTER");
        personalizedtimeconverter.setPreferredSize(new java.awt.Dimension(555, 30));
        jPanel100.add(personalizedtimeconverter);
        personalizedtimeconverter.setBounds(0, 40, 650, 40);

        resulttime.setBackground(new java.awt.Color(69, 69, 69));
        resulttime.setFont(new java.awt.Font("Goudy Stout", 1, 48)); // NOI18N
        resulttime.setForeground(new java.awt.Color(237, 237, 237));
        resulttime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel100.add(resulttime);
        resulttime.setBounds(30, 375, 585, 50);

        resultdate.setFont(new java.awt.Font("Lucida Sans", 1, 24)); // NOI18N
        resultdate.setForeground(new java.awt.Color(237, 237, 237));
        resultdate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel100.add(resultdate);
        resultdate.setBounds(60, 470, 290, 50);

        resultoffset.setFont(new java.awt.Font("Lucida Sans", 1, 24)); // NOI18N
        resultoffset.setForeground(new java.awt.Color(237, 237, 237));
        resultoffset.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel100.add(resultoffset);
        resultoffset.setBounds(330, 470, 260, 50);

        resulttimezone.setFont(new java.awt.Font("Lucida Sans", 1, 17)); // NOI18N
        resulttimezone.setForeground(new java.awt.Color(237, 237, 237));
        resulttimezone.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel100.add(resulttimezone);
        resulttimezone.setBounds(30, 420, 585, 50);

        line.setBackground(new java.awt.Color(237, 237, 237));
        line.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(237, 237, 237), 2000, true));
        line.setForeground(new java.awt.Color(237, 237, 237));

        javax.swing.GroupLayout lineLayout = new javax.swing.GroupLayout(line);
        line.setLayout(lineLayout);
        lineLayout.setHorizontalGroup(
            lineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        lineLayout.setVerticalGroup(
            lineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel100.add(line);
        line.setBounds(30, 295, 585, 2);

        colon1.setFont(new java.awt.Font("Goudy Stout", 1, 60)); // NOI18N
        colon1.setForeground(new java.awt.Color(237, 237, 237));
        colon1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        colon1.setText(":");
        jPanel100.add(colon1);
        colon1.setBounds(233, 105, 30, 83);

        bgptc.setForeground(new java.awt.Color(237, 237, 237));
        bgptc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bgptc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/half-globe-home.png"))); // NOI18N
        bgptc.setToolTipText("");
        jPanel100.add(bgptc);
        bgptc.setBounds(0, 254, 650, 346);

        bgpersonalizedtimeconverter.setBackground(new java.awt.Color(69, 69, 69));
        bgpersonalizedtimeconverter.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(89, 89, 89), 50, true));

        javax.swing.GroupLayout bgpersonalizedtimeconverterLayout = new javax.swing.GroupLayout(bgpersonalizedtimeconverter);
        bgpersonalizedtimeconverter.setLayout(bgpersonalizedtimeconverterLayout);
        bgpersonalizedtimeconverterLayout.setHorizontalGroup(
            bgpersonalizedtimeconverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );
        bgpersonalizedtimeconverterLayout.setVerticalGroup(
            bgpersonalizedtimeconverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel100.add(bgpersonalizedtimeconverter);
        bgpersonalizedtimeconverter.setBounds(5, 30, 640, 60);

        hour.setBackground(new java.awt.Color(69, 69, 69));
        hour.setFont(new java.awt.Font("Goudy Stout", 1, 70)); // NOI18N
        hour.setForeground(new java.awt.Color(237, 237, 237));
        hour.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hour.setText("00");
        hour.setToolTipText("Enter the hour.");
        hour.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        hour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourActionPerformed(evt);
            }
        });
        hour.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hourKeyPressed(evt);
            }
        });
        jPanel100.add(hour);
        hour.setBounds(108, 105, 125, 89);

        min.setBackground(new java.awt.Color(69, 69, 69));
        min.setFont(new java.awt.Font("Goudy Stout", 1, 70)); // NOI18N
        min.setForeground(new java.awt.Color(237, 237, 237));
        min.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        min.setText("00");
        min.setToolTipText("Enter the minute.");
        min.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        min.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minActionPerformed(evt);
            }
        });
        min.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                minKeyPressed(evt);
            }
        });
        jPanel100.add(min);
        min.setBounds(263, 105, 125, 89);

        sec.setBackground(new java.awt.Color(69, 69, 69));
        sec.setFont(new java.awt.Font("Goudy Stout", 1, 70)); // NOI18N
        sec.setForeground(new java.awt.Color(237, 237, 237));
        sec.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sec.setText("00");
        sec.setToolTipText("Enter the seconds.");
        sec.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secActionPerformed(evt);
            }
        });
        sec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                secKeyPressed(evt);
            }
        });
        jPanel100.add(sec);
        sec.setBounds(418, 105, 125, 89);

        from.setBackground(new java.awt.Color(69, 69, 69));
        from.setEditable(true);
        from.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        from.setForeground(new java.awt.Color(237, 237, 237));
        from.setMaximumRowCount(5);
        from.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "","UTC-12: Baker Island, Howland Island (United States)",
            "UTC-11: American Samoa, Niue (New Zealand)",
            "UTC-10: Hawaii (United States)",
            "UTC-9: Alaska (United States)",
            "UTC-8: United States (Pacific Time Zone)",
            "UTC-7: United States (Mountain Time Zone)",
            "UTC-6: United States (Central Time Zone), Mexico (Central Time Zone)",
            "UTC-5: United States (Eastern Time Zone), Colombia, Peru",
            "UTC-4: Canada (Atlantic Time Zone), Venezuela",
            "UTC-3: Argentina, Brazil (Brasília Time Zone)",
            "UTC-1: Portugal (Azores Time Zone)",
            "UTC±0: United Kingdom (Greenwich Mean Time), Ghana",
            "UTC+1: France, Germany, Italy, Nigeria, Spain (Central European Time)",
            "UTC+2: Greece, Egypt, South Africa, Turkey (Eastern European Time)",
            "UTC+3: Iraq, Kenya, Saudi Arabia, Russia (Moscow Time Zone)",
            "UTC+4: United Arab Emirates, Mauritius, Seychelles",
            "UTC+5: Pakistan, Maldives, Uzbekistan",
            "UTC+6: Bangladesh, Kazakhstan",
            "UTC+7: Cambodia, Thailand, Vietnam",
            "UTC+8: China, Singapore, Australia (Western Standard Time)",
            "UTC+9: Japan, South Korea",
            "UTC+10: Australia (Eastern Standard Time), Papua New Guinea",
            "UTC+11: Solomon Islands, Vanuatu",
            "UTC+12: New Zealand, Fiji"}));
from.setToolTipText("Choose the timezone to convert from");
from.setAlignmentX(0.0F);
from.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Time Zone", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 1, 14), new java.awt.Color(237, 237, 237))); // NOI18N
from.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        fromActionPerformed(evt);
    }
    });
    jPanel100.add(from);
    from.setBounds(115, 205, 200, 40);

    to.setBackground(new java.awt.Color(69, 69, 69));
    to.setEditable(true);
    to.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
    to.setForeground(new java.awt.Color(237, 237, 237));
    to.setMaximumRowCount(5);
    to.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "","UTC-12: Baker Island, Howland Island (United States)",
        "UTC-11: American Samoa, Niue (New Zealand)",
        "UTC-10: Hawaii (United States)",
        "UTC-9: Alaska (United States)",
        "UTC-8: United States (Pacific Time Zone)",
        "UTC-7: United States (Mountain Time Zone)",
        "UTC-6: United States (Central Time Zone), Mexico (Central Time Zone)",
        "UTC-5: United States (Eastern Time Zone), Colombia, Peru",
        "UTC-4: Canada (Atlantic Time Zone), Venezuela",
        "UTC-3: Argentina, Brazil (Brasília Time Zone)",
        "UTC-1: Portugal (Azores Time Zone)",
        "UTC±0: United Kingdom (Greenwich Mean Time), Ghana",
        "UTC+1: France, Germany, Italy, Nigeria, Spain (Central European Time)",
        "UTC+2: Greece, Egypt, South Africa, Turkey (Eastern European Time)",
        "UTC+3: Iraq, Kenya, Saudi Arabia, Russia (Moscow Time Zone)",
        "UTC+4: United Arab Emirates, Mauritius, Seychelles",
        "UTC+5: Pakistan, Maldives, Uzbekistan",
        "UTC+6: Bangladesh, Kazakhstan",
        "UTC+7: Cambodia, Thailand, Vietnam",
        "UTC+8: China, Singapore, Australia (Western Standard Time)",
        "UTC+9: Japan, South Korea",
        "UTC+10: Australia (Eastern Standard Time), Papua New Guinea",
        "UTC+11: Solomon Islands, Vanuatu",
        "UTC+12: New Zealand, Fiji" }));
to.setToolTipText("Choose the timezone to convert to");
to.setAlignmentX(0.0F);
to.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Time Zone", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 1, 14), new java.awt.Color(237, 237, 237))); // NOI18N
to.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
    toActionPerformed(evt);
    }
    });
    jPanel100.add(to);
    to.setBounds(350, 205, 200, 40);

    resultbg.setBackground(new java.awt.Color(69, 69, 69));
    resultbg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(89, 89, 89), 125, true));

    javax.swing.GroupLayout resultbgLayout = new javax.swing.GroupLayout(resultbg);
    resultbg.setLayout(resultbgLayout);
    resultbgLayout.setHorizontalGroup(
        resultbgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 335, Short.MAX_VALUE)
    );
    resultbgLayout.setVerticalGroup(
        resultbgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
    );

    jPanel100.add(resultbg);
    resultbg.setBounds(30, 350, 585, 180);

    convert.setBackground(new java.awt.Color(89, 89, 89));
    convert.setFont(new java.awt.Font("Goudy Stout", 0, 10)); // NOI18N
    convert.setForeground(new java.awt.Color(237, 237, 237));
    convert.setText("ok");
    convert.setToolTipText("Tap to convert.");
    convert.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.darkGray));
    convert.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            convertMouseEntered(evt);
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            convertMouseExited(evt);
        }
    });
    convert.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            convertActionPerformed(evt);
        }
    });
    jPanel100.add(convert);
    convert.setBounds(550, 210, 40, 33);

    to1.setFont(new java.awt.Font("Goudy Stout", 0, 12)); // NOI18N
    to1.setForeground(new java.awt.Color(237, 237, 237));
    to1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    to1.setText("to");
    jPanel100.add(to1);
    to1.setBounds(312, 205, 40, 40);

    from1.setFont(new java.awt.Font("Goudy Stout", 0, 12)); // NOI18N
    from1.setForeground(new java.awt.Color(237, 237, 237));
    from1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    from1.setText("From");
    jPanel100.add(from1);
    from1.setBounds(40, 205, 70, 40);

    jPanel1.add(jPanel100);
    jPanel100.setBounds(350, 0, 650, 600);
    jPanel100.getAccessibleContext().setAccessibleName("");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );

    setBounds(0, 0, 1014, 637);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        Color clr = new Color (69,69,69);
        tabHome.setBackground(clr);
        tabGlobalTimeConverter.setBackground(new Color(39,39,39));
        tabPersonalizedTimeConverter.setBackground(new Color(39,39,39));
        tabTimeMasterSchedule.setBackground(new Color(39,39,39));
        tabHistory.setBackground(new Color(39,39,39));
        tabExit.setBackground(new Color(39,39,39));

        Welcome WelcomeFrame = new Welcome();
        WelcomeFrame.setVisible(true);
        WelcomeFrame.pack();
        WelcomeFrame.setLocationRelativeTo(null);
        this.dispose();

    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseEntered
        // TODO add your handling code here:
        Color clr = new Color (69,69,69);
        tabHome.setBackground(clr);
        tabGlobalTimeConverter.setBackground(new Color(39,39,39));
        tabPersonalizedTimeConverter.setBackground(new Color(39,39,39));
        tabTimeMasterSchedule.setBackground(new Color(39,39,39));
        tabHistory.setBackground(new Color(39,39,39));
        tabExit.setBackground(new Color(39,39,39));
    }//GEN-LAST:event_jLabel2MouseEntered

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        Color clr = new Color (69,69,69);
        tabGlobalTimeConverter.setBackground(clr);
        tabHome.setBackground(new Color(39,39,39));
        tabPersonalizedTimeConverter.setBackground(new Color(39,39,39));
        tabTimeMasterSchedule.setBackground(new Color(39,39,39));
        tabHistory.setBackground(new Color(39,39,39));
        tabExit.setBackground(new Color(39,39,39));

        GlobalTimeConverter GlobalTimeConverterFrame = new GlobalTimeConverter();
        GlobalTimeConverterFrame.setVisible(true);
        GlobalTimeConverterFrame.pack();
        GlobalTimeConverterFrame.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseEntered
        // TODO add your handling code here:
        Color clr = new Color (69,69,69);
        tabGlobalTimeConverter.setBackground(clr);
        tabHome.setBackground(new Color(39,39,39));
        tabPersonalizedTimeConverter.setBackground(new Color(39,39,39));
        tabTimeMasterSchedule.setBackground(new Color(39,39,39));
        tabHistory.setBackground(new Color(39,39,39));
        tabExit.setBackground(new Color(39,39,39));
    }//GEN-LAST:event_jLabel5MouseEntered

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:
        Color clr = new Color (69,69,69);
        tabPersonalizedTimeConverter.setBackground(clr);
        tabGlobalTimeConverter.setBackground(new Color(39,39,39));
        tabHome.setBackground(new Color(39,39,39));
        tabTimeMasterSchedule.setBackground(new Color(39,39,39));
        tabHistory.setBackground(new Color(39,39,39));
        tabExit.setBackground(new Color(39,39,39));
        
        PersonalizedTimeConverter PersonalizedTimeConverterFrame = new PersonalizedTimeConverter();
        PersonalizedTimeConverterFrame.setVisible(true);
        PersonalizedTimeConverterFrame.pack();
        PersonalizedTimeConverterFrame.setLocationRelativeTo(null);
        this.dispose();

    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseEntered
        // TODO add your handling code here:
        Color clr = new Color (69,69,69);
        tabPersonalizedTimeConverter.setBackground(clr);
        tabGlobalTimeConverter.setBackground(new Color(39,39,39));
        tabHome.setBackground(new Color(39,39,39));
        tabTimeMasterSchedule.setBackground(new Color(39,39,39));
        tabHistory.setBackground(new Color(39,39,39));
        tabExit.setBackground(new Color(39,39,39));
    }//GEN-LAST:event_jLabel6MouseEntered

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:
        Color clr = new Color (69,69,69);
        tabTimeMasterSchedule.setBackground(clr);
        tabGlobalTimeConverter.setBackground(new Color(39,39,39));
        tabPersonalizedTimeConverter.setBackground(new Color(39,39,39));
        tabHome.setBackground(new Color(39,39,39));
        tabHistory.setBackground(new Color(39,39,39));
        tabExit.setBackground(new Color(39,39,39));
        
        TimeMasterScheduler TimeMasterSchedulerFrame = new TimeMasterScheduler();
        TimeMasterSchedulerFrame.setVisible(true);
        TimeMasterSchedulerFrame.pack();
        TimeMasterSchedulerFrame.setLocationRelativeTo(null);
        this.dispose();

    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseEntered
        // TODO add your handling code here:
        Color clr = new Color (69,69,69);
        tabTimeMasterSchedule.setBackground(clr);
        tabGlobalTimeConverter.setBackground(new Color(39,39,39));
        tabPersonalizedTimeConverter.setBackground(new Color(39,39,39));
        tabHome.setBackground(new Color(39,39,39));
        tabHistory.setBackground(new Color(39,39,39));
        tabExit.setBackground(new Color(39,39,39));
    }//GEN-LAST:event_jLabel7MouseEntered

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        // TODO add your handling code here:
        Color clr = new Color (69,69,69);
        tabHistory.setBackground(clr);
        tabGlobalTimeConverter.setBackground(new Color(39,39,39));
        tabPersonalizedTimeConverter.setBackground(new Color(39,39,39));
        tabTimeMasterSchedule.setBackground(new Color(39,39,39));
        tabHome.setBackground(new Color(39,39,39));
        tabExit.setBackground(new Color(39,39,39));
        
        History HistoryFrame = new History();
        HistoryFrame.setVisible(true);
        HistoryFrame.pack();
        HistoryFrame.setLocationRelativeTo(null);
        this.dispose();

    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel8MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseEntered
        // TODO add your handling code here:
        Color clr = new Color (69,69,69);
        tabHistory.setBackground(clr);
        tabGlobalTimeConverter.setBackground(new Color(39,39,39));
        tabPersonalizedTimeConverter.setBackground(new Color(39,39,39));
        tabTimeMasterSchedule.setBackground(new Color(39,39,39));
        tabHome.setBackground(new Color(39,39,39));
        tabExit.setBackground(new Color(39,39,39));
    }//GEN-LAST:event_jLabel8MouseEntered

    private void tabExit1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabExit1MouseClicked
        // TODO add your handling code here:
        UIManager.put("OptionPane.background", new Color (39,39,39));
        UIManager.put("Panel.background", new Color(69,69,69));
        UIManager.put("OptionPane.messageForeground", Color.WHITE);
        UIManager.put("Button.background", new Color(69,69,69));
        UIManager.put("Button.foreground", new Color(247,247,247));
        
        JFrame frame = new JFrame("EXIT");
        
        int confirmed = JOptionPane.showConfirmDialog(frame, "Confirm if you want to LOGOUT", "LOGOUT Confirmation", JOptionPane.YES_NO_OPTION);
        
        if (confirmed == JOptionPane.YES_OPTION) {
            Login LoginFrame = new Login();
            LoginFrame.setVisible(true);
            LoginFrame.pack();
            LoginFrame.setLocationRelativeTo(null);
            this.dispose();
        }
       
    }//GEN-LAST:event_tabExit1MouseClicked

    private void tabExit1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabExit1MouseEntered
        // TODO add your handling code here:
        Color clr = new Color (69,69,69);
        tabExit.setBackground(clr);
        tabGlobalTimeConverter.setBackground(new Color(39,39,39));
        tabPersonalizedTimeConverter.setBackground(new Color(39,39,39));
        tabTimeMasterSchedule.setBackground(new Color(39,39,39));
        tabHistory.setBackground(new Color(39,39,39));
        tabHome.setBackground(new Color(39,39,39));
    }//GEN-LAST:event_tabExit1MouseEntered

    private void convertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertActionPerformed
        // TODO add your handling code here:
        LocalDate currentDate = LocalDate.now();
        
        int option1 = from.getSelectedIndex(); // combobx 1 from
        int option2 = to.getSelectedIndex(); // combox 2 to 

        int year = currentDate.getYear();
        int month = currentDate.getMonthValue();
        int day = currentDate.getDayOfMonth();

        int hour1 = Integer.parseInt(hour.getText());
        int time = 0;
        switch (option1) {
            case 1:
                time = hour1 + 12;;
                resulttimezone.setText("Baker Island, Howland Island (United States)");
                resultoffset.setText("UTC-12");
                break;

            case 2:
                time = hour1 + 11;
                resulttimezone.setText("American Samoa, Niue (New Zealand)");
                resultoffset.setText("UTC-11");
                break;

            case 3:
                time = hour1 + 10;
                resulttimezone.setText("Hawaii (United States)");
                resultoffset.setText("UTC-10");
                break;

            case 4:
                time = hour1 + 9;
                resulttimezone.setText("Alaska (United States)");
                resultoffset.setText("UTC-9");
                break;

            case 5:
                time = hour1 + 8;
                resulttimezone.setText("United States (Pacific Time Zone)");
                resultoffset.setText("UTC-8");

                break;
            case 6:
                time = hour1 + 7;
                resulttimezone.setText("United States (Mountain Time Zone)");
                resultoffset.setText("UTC-7");

                break;
            case 7:
                time = hour1 + 6;
                resulttimezone.setText("United States (Central Time Zone), Mexico (Central Time Zone)");
                resultoffset.setText("UTC-6");
                break;

            case 8:
                time = hour1 + 5;
                resulttimezone.setText("United States (Eastern Time Zone), Colombia, Peru");
                resultoffset.setText("UTC-5");
                break;

            case 9:
                time = hour1 + 4;
                resulttimezone.setText("Canada (Atlantic Time Zone), Venezuela");
                resultoffset.setText("UTC-4");
                break;

            case 10:
                time = hour1 + 3;
                resulttimezone.setText("Argentina, Brazil (Brasília Time Zone)");
                resultoffset.setText("UTC-3");
                break;

            case 11:
                time = hour1 + 1;
                resulttimezone.setText("Portugal (Azores Time Zone)");
                resultoffset.setText("UTC-1");
                break;

            case 12:
                time = hour1;
                resulttimezone.setText("United Kingdom (Greenwich Mean Time), Ghana");
                resultoffset.setText("UTC+0");
                break;

            case 13:
                time = hour1 - 1;
                resulttimezone.setText("France, Germany, Italy, Nigeria, Spain (Central European Time)");
                resultoffset.setText("UTC+1");
                break;

            case 14:
                time = hour1 - 2;
                resulttimezone.setText("Greece, Egypt, South Africa, Turkey (Eastern European Time)");
                resultoffset.setText("UTC+2");
                break;

            case 15:
                time = hour1 - 3;
                resulttimezone.setText("Iraq, Kenya, Saudi Arabia, Russia (Moscow Time Zone)");
                resultoffset.setText("UTC+3");
                break;

            case 16:
                time = hour1 - 4;
                resulttimezone.setText("United Arab Emirates, Mauritius, Seychelles");
                resultoffset.setText("UTC+4");
                break;

            case 17:
                time = hour1 - 5;
                resulttimezone.setText("Pakistan, Maldives, Uzbekistan");
                resultoffset.setText("UTC+5");
                break;

            case 18:
                time = hour1 - 6;
                resulttimezone.setText("Bangladesh, Kazakhstan");
                resultoffset.setText("UTC+6");
                break;

            case 19:
                time = hour1 - 7;
                resulttimezone.setText("Cambodia, Thailand, Vietnam");
                resultoffset.setText("UTC+7");
                break;

            case 20:
                time = hour1 - 8;
                resulttimezone.setText("China, Singapore, Australia (Western Standard Time)");
                resultoffset.setText("UTC+8");
                break;

            case 21:
                time = hour1 - 9;
                resulttimezone.setText("Japan, South Korea");
                resultoffset.setText("UTC+9");
                break;

            case 22:
                time = hour1 - 10;
                resulttimezone.setText("Australia (Eastern Standard Time), Papua New Guinea");
                resultoffset.setText("UTC+10");
                break;

            case 23:
                time = hour1 - 11;
                resulttimezone.setText("Solomon Islands, Vanuatu");
                resultoffset.setText("UTC+11");
                break;

            case 24:
                time = hour1 - 12;
                resulttimezone.setText("New Zealand, Fiji");
                resultoffset.setText("UTC+12");
                break;

            default:
                System.out.println("Invalid.");
                return; 
        }

        if(time>=24){
            time = time-24;
            day++;
        }else if(time<0){
            time = time+24;
            day--;
        }

        int time2 = 0;

        switch (option2) {
            case 1:
                time2 = time - 12;
                resulttimezone.setText("Baker Island, Howland Island (United States)");
                resultoffset.setText("UTC-12");
                break;
                
            case 2:
                time2 = time - 11;
                resulttimezone.setText("American Samoa, Niue (New Zealand)");
                resultoffset.setText("UTC-11");
                break;
                
            case 3:
                time2 = time - 10;
                resulttimezone.setText("Hawaii (United States)");
                resultoffset.setText("UTC-10");
                break;
                
            case 4:
                time2 = time - 9;
                resulttimezone.setText("Alaska (United States)");
                resultoffset.setText("UTC-9");
                break;
                
            case 5:
                time2 = time - 8;
                resulttimezone.setText("United States (Pacific Time Zone)");
                resultoffset.setText("UTC-8");
                
                break;
            case 6:
                time2 = time - 7;
                resulttimezone.setText("United States (Mountain Time Zone)");
                resultoffset.setText("UTC-7");
                
                break;
            case 7:
                time2 = time - 6;
                resulttimezone.setText("United States (Central Time Zone), Mexico (Central Time Zone)");
                resultoffset.setText("UTC-6");
                break;
                
            case 8:
                time2 = time - 5;
                resulttimezone.setText("United States (Eastern Time Zone), Colombia, Peru");
                resultoffset.setText("UTC-5");
                break;
                
            case 9:
                time2 = time - 4;
                resulttimezone.setText("Canada (Atlantic Time Zone), Venezuela");
                resultoffset.setText("UTC-4");
                break;
                
            case 10:
                time2  = time - 3;
                resulttimezone.setText("Argentina, Brazil (Brasília Time Zone)");
                resultoffset.setText("UTC-3");
                break;
                
            case 11:
                time2 = time - 1;
                resulttimezone.setText("Portugal (Azores Time Zone)");
                resultoffset.setText("UTC-1");
                break;
                
            case 12:
                time2 = time;
                resulttimezone.setText("United Kingdom (Greenwich Mean Time), Ghana");
                resultoffset.setText("UTC+0");
                break;
                
            case 13:
                time2 = time + 1;
                resulttimezone.setText("France, Germany, Italy, Nigeria, Spain (Central European Time)");
                resultoffset.setText("UTC+1");
                break;
                
            case 14:
                time2 = time + 2;
                resulttimezone.setText("Greece, Egypt, South Africa, Turkey (Eastern European Time)");
                resultoffset.setText("UTC+2");
                break;
                
            case 15:
                time2 = time + 3;
                resulttimezone.setText("Iraq, Kenya, Saudi Arabia, Russia (Moscow Time Zone)");
                resultoffset.setText("UTC+3");
                break;
                
            case 16:
                time2 = time + 4;
                resulttimezone.setText("United Arab Emirates, Mauritius, Seychelles");
                resultoffset.setText("UTC+4");
                break;
                
            case 17:
                time2 = time + 5;
                resulttimezone.setText("Pakistan, Maldives, Uzbekistan");
                resultoffset.setText("UTC+5");
                break;
                
            case 18:
                time2 = time + 6;
                resulttimezone.setText("Bangladesh, Kazakhstan");
                resultoffset.setText("UTC+6");
                break;
                
            case 19:
                time2 = time + 7;
                resulttimezone.setText("Cambodia, Thailand, Vietnam");
                resultoffset.setText("UTC+7");
                break;
                
            case 20:
                time2 = time + 8;
                resulttimezone.setText("China, Singapore, Australia (Western Standard Time)");
                resultoffset.setText("UTC+8");
                break;
                
            case 21:
                time2 = time + 9;
                resulttimezone.setText("Japan, South Korea");
                resultoffset.setText("UTC+9");
                break;
                
            case 22:
                time2 = time + 10;
                resulttimezone.setText("Australia (Eastern Standard Time), Papua New Guinea");
                resultoffset.setText("UTC+10");
                break;
                
            case 23:
                time2 = time + 11;
                resulttimezone.setText("Solomon Islands, Vanuatu");
                resultoffset.setText("UTC+11");
                break;
                
            case 24:
                time2 = time + 12;
                resulttimezone.setText("New Zealand, Fiji");
                resultoffset.setText("UTC+12");
                break;

            default:
                System.out.println("Invalid.");
                return; 
                
        }

        if (time2>=24){
            time2 = time2-24;
            day = day+1;
        }    
        if (time2<0){
            time2 = time2+24;
            day = day-1;
        }
        if (day == 0){
            month = month-1;
            
            if (month == 1||month ==3||month ==5||month ==7||month ==8||month ==10||month ==12){
                day = 31;
            } if (month ==2){
                if ((year%4)==0){
                    day = 29;
                }else{
                    day = 28;
                }
            } else{
                day = 30;
            }
        }

        String time1 = String.valueOf(time2);
        if (time2<10){
            time1 = "0"+time2;
        }

       resulttime.setText(time1+ ":" + min.getText() + ":" + sec.getText());
       String formattedDate = String.format("%04d/%02d/%02d",year,month,day);
       resultdate.setText(formattedDate);
       
       try{
            
            DateTimeFormatter format = DateTimeFormatter.ofPattern("yyyy/MM/dd");
            String Date = currentDate.format(format);
            
            // makuha yung mga vaue na input sa ui textfields
            String hr = hour.getText();
            String ms = min.getText();
            String sc = sec.getText();
            String Time = hr+":"+ms+":"+sc;
            
            //makuha yung mga slected values natin sa combobox
            String From = from.getSelectedItem().toString();
            String To = to.getSelectedItem().toString();
            
            //makuha yung mga value, which is yung mga naging result sa pagcoconvert. Converted time and date
            String timecOnverted= resulttime.getText();
            String dateConverted= resultdate.getText();
            
            //ginagamit siya para mahanda yung sql statment sa database
            //prepare ng sql insert statement para makapag insert tayo ng data sa sql table natin. 
            // itong prepared statment ginagamit siya para magaroon ng parameter  bago maipasa sa table or dun sa sql natin
            PreparedStatement stmt = con.prepareStatement("INSERT INTO USERS VALUES (?,?,?,?,?,?)");
            
            //sinet natin yung values para sa prepared statement
            stmt.setString(1,Date);
            stmt.setString(2,Time);
            stmt.setString(3,From);
            stmt.setString(4,To);
            stmt.setString(5,dateConverted);
            stmt.setString(6,timecOnverted);

            // execute na natin pag iinsert sa ating sql table
            stmt.execute();
            System.out.println("Insertion completed");
            
            //para maclose yung prepared statement
            stmt.close();
            

       }catch(SQLException ex){
           Logger.getLogger(PersonalizedTimeConverter.class.getName()).log(Level.SEVERE, null, ex);
           
       }
       
       
       
       
       
        
    }//GEN-LAST:event_convertActionPerformed

    private void fromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromActionPerformed

    private void toActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toActionPerformed

    private void hourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourActionPerformed
        // TODO add your handling code 
        int hour1 = Integer.parseInt(hour.getText());
        if(hour1<10){
            hour.setText("0"+ hour1);
        }

    }//GEN-LAST:event_hourActionPerformed

    private void minActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minActionPerformed
        // TODO add your handling code here
        int min1 = Integer.parseInt(min.getText());
        if(min1<10){
            min.setText("0"+ min1);
        }

    }//GEN-LAST:event_minActionPerformed

    private void hourKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hourKeyPressed
        // TODO add your handling code here:
        
        int c = evt.getKeyCode();
                
        //hindi makakapag enter sa text field if enter in is not a numeb
         if (Character.isLetter(c)) {
            hour.setEditable(false);
        } else if (Character.isDigit(c)) {
            // para ma check kung ang input is a numeric digit
            String currentText = hour.getText();
            if (currentText.length() < 2) {
                int currentValue = Integer.parseInt(currentText + Character.toString((char) c));
                if (currentValue <= 23) {
                    hour.setEditable(true);
                } else {
                    hour.setEditable(false);
                }
            } else {
                hour.setEditable(false);
            }
        } else {
            hour.setEditable(true);
        }

    }//GEN-LAST:event_hourKeyPressed

    private void minKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minKeyPressed
        // TODO add your handling code here:
        int c = evt.getKeyCode();
                
        if (Character.isLetter(c)) {
            min.setEditable(false);
        } else if (Character.isDigit(c)) {
            // para ma Check kung ang input is a numeric digit
            String currentText = min.getText();
            if (currentText.length() < 2) {
                int currentValue = Integer.parseInt(currentText + Character.toString((char) c));
                if (currentValue <= 59) {
                    min.setEditable(true);
                } else {
                    min.setEditable(false);
                }
            } else {
                min.setEditable(false);
            }
        } else {
            min.setEditable(true);
        }
    }//GEN-LAST:event_minKeyPressed

    private void secKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_secKeyPressed
        // TODO add your handling code here
        int c = evt.getKeyCode();
                
        if (Character.isLetter(c)) {
            sec.setEditable(false);
        } else if (Character.isDigit(c)) {
            String currentText = sec.getText();
            if (currentText.length() < 2) {
                int currentValue = Integer.parseInt(currentText + Character.toString((char) c));
                if (currentValue <= 59) {
                    sec.setEditable(true);
                } else {
                    sec.setEditable(false);
                }
            } else {
                sec.setEditable(false);
            }
        } else {
            sec.setEditable(true);
        }
    }//GEN-LAST:event_secKeyPressed

    private void secActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secActionPerformed
        // TODO add your handling code here:
        int sec1 = Integer.parseInt(sec.getText());
        if(sec1<10){
            hour.setText("0"+ sec1);
        }

    }//GEN-LAST:event_secActionPerformed

    private void convertMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_convertMouseEntered
        // TODO add your handling code here:
        convert.setBackground(new Color(255, 234, 0));
        convert.setForeground(new Color (0,0,0));
//        personalizedtimeconverter.setForeground(new Color(255, 234, 0));
    }//GEN-LAST:event_convertMouseEntered

    private void convertMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_convertMouseExited
        // TODO add your handling code here
        convert.setBackground(new Color(89,89,89));
        convert.setForeground(new Color (240,240,240));
//        personalizedtimeconverter.setForeground(new Color(237, 237, 237));

    }//GEN-LAST:event_convertMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PersonalizedTimeConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PersonalizedTimeConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PersonalizedTimeConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PersonalizedTimeConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PersonalizedTimeConverter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bgpersonalizedtimeconverter;
    private javax.swing.JLabel bgptc;
    private javax.swing.JPanel bgtab;
    private javax.swing.JLabel colon1;
    private javax.swing.JLabel colon2;
    private javax.swing.JButton convert;
    private javax.swing.JComboBox<String> from;
    private javax.swing.JLabel from1;
    private javax.swing.JTextField hour;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel100;
    private javax.swing.JPanel line;
    private javax.swing.JTextField min;
    private javax.swing.JLabel personalizedtimeconverter;
    private javax.swing.JPanel resultbg;
    private javax.swing.JLabel resultdate;
    private javax.swing.JLabel resultoffset;
    private javax.swing.JLabel resulttime;
    private javax.swing.JLabel resulttimezone;
    private javax.swing.JTextField sec;
    private javax.swing.JPanel tabExit;
    private javax.swing.JLabel tabExit1;
    private javax.swing.JPanel tabFeatures;
    private javax.swing.JPanel tabGlobalTimeConverter;
    private javax.swing.JPanel tabHistory;
    private javax.swing.JPanel tabHome;
    private javax.swing.JPanel tabPersonalizedTimeConverter;
    private javax.swing.JPanel tabTimeMasterSchedule;
    private javax.swing.JComboBox<String> to;
    private javax.swing.JLabel to1;
    // End of variables declaration//GEN-END:variables
}
